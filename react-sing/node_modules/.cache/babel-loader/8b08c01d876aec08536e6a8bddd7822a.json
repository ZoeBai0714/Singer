{"ast":null,"code":"var _jsxFileName = \"/Users/xuebai/flatiron/Sing/react-sing/src/Component/Recorder.js\";\nimport React from 'react';\nimport { ReactMic } from 'react-mic';\nexport default class Recorder extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      microphoneRecorder: null,\n      canvas: null,\n      canvasCtx: null\n    };\n\n    this.visualize = () => {\n      const self = this;\n      const _this$props = this.props,\n            backgroundColor = _this$props.backgroundColor,\n            strokeColor = _this$props.strokeColor,\n            width = _this$props.width,\n            height = _this$props.height,\n            visualSetting = _this$props.visualSetting;\n      const _this$state = this.state,\n            canvas = _this$state.canvas,\n            canvasCtx = _this$state.canvasCtx;\n\n      if (visualSetting === 'sinewave') {\n        Visualizer.visualizeSineWave(canvasCtx, canvas, width, height, backgroundColor, strokeColor);\n      } else if (visualSetting === 'frequencyBars') {\n        Visualizer.visualizeFrequencyBars(canvasCtx, canvas, width, height, backgroundColor, strokeColor);\n      } else if (visualSetting === 'frequencyCircles') {\n        Visualizer.visualizeFrequencyCircles(canvasCtx, canvas, width, height, backgroundColor, strokeColor);\n      }\n    };\n  }\n\n  componentDidMount() {\n    const _this$props2 = this.props,\n          onSave = _this$props2.onSave,\n          onStop = _this$props2.onStop,\n          onStart = _this$props2.onStart,\n          onData = _this$props2.onData,\n          audioElem = _this$props2.audioElem,\n          audioBitsPerSecond = _this$props2.audioBitsPerSecond,\n          mimeType = _this$props2.mimeType;\n    const visualizer = this.refs.visualizer;\n    const canvas = visualizer;\n    const canvasCtx = canvas.getContext(\"2d\");\n    const options = {\n      audioBitsPerSecond: audioBitsPerSecond,\n      mimeType: mimeType\n    };\n\n    if (audioElem) {\n      AudioPlayer.create(audioElem);\n      this.setState({\n        canvas: canvas,\n        canvasCtx: canvasCtx\n      }, () => {\n        this.visualize();\n      });\n    } else {\n      this.setState({\n        microphoneRecorder: new MicrophoneRecorder(onStart, onStop, onSave, onData, options),\n        canvas: canvas,\n        canvasCtx: canvasCtx\n      }, () => {\n        this.visualize();\n      });\n    }\n  }\n\n  clear() {\n    const _this$props3 = this.props,\n          width = _this$props3.width,\n          height = _this$props3.height;\n    const canvasCtx = this.state.canvasCtx;\n    canvasCtx.clearRect(0, 0, width, height);\n  }\n\n  render() {\n    const _this$props4 = this.props,\n          record = _this$props4.record,\n          onStop = _this$props4.onStop,\n          width = _this$props4.width,\n          height = _this$props4.height;\n    const _this$state2 = this.state,\n          microphoneRecorder = _this$state2.microphoneRecorder,\n          canvasCtx = _this$state2.canvasCtx;\n\n    if (record) {\n      if (microphoneRecorder) {\n        microphoneRecorder.startRecording();\n      }\n    } else {\n      if (microphoneRecorder) {\n        microphoneRecorder.stopRecording(onStop);\n        this.clear();\n      }\n    }\n\n    return React.createElement(\"canvas\", {\n      ref: \"visualizer\",\n      height: height,\n      width: width,\n      className: this.props.className,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    });\n  }\n\n}","map":{"version":3,"sources":["/Users/xuebai/flatiron/Sing/react-sing/src/Component/Recorder.js"],"names":["React","ReactMic","Recorder","Component","state","microphoneRecorder","canvas","canvasCtx","visualize","self","props","backgroundColor","strokeColor","width","height","visualSetting","Visualizer","visualizeSineWave","visualizeFrequencyBars","visualizeFrequencyCircles","componentDidMount","onSave","onStop","onStart","onData","audioElem","audioBitsPerSecond","mimeType","visualizer","refs","getContext","options","AudioPlayer","create","setState","MicrophoneRecorder","clear","clearRect","render","record","startRecording","stopRecording","className"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { ReactMic } from 'react-mic';\n\nexport default class Recorder extends React.Component {\n    state = {\n        microphoneRecorder  : null,\n        canvas              : null,\n        canvasCtx           : null\n      }\n      componentDidMount() {\n        const {\n          onSave,\n          onStop,\n          onStart,\n          onData,\n          audioElem,\n          audioBitsPerSecond,\n          mimeType\n        } = this.props;\n        const { visualizer } = this.refs;\n        const canvas = visualizer;\n        const canvasCtx = canvas.getContext(\"2d\");\n        const options = {\n          audioBitsPerSecond : audioBitsPerSecond,\n          mimeType           : mimeType\n        }\n    \n        if(audioElem) {\n          AudioPlayer.create(audioElem);\n    \n          this.setState({\n            canvas: canvas,\n            canvasCtx: canvasCtx\n          }, () => {\n            this.visualize();\n          });\n        } else {\n    \n          this.setState({\n            microphoneRecorder: new MicrophoneRecorder(\n                                  onStart,\n                                  onStop,\n                                  onSave,\n                                  onData,\n                                  options\n                                ),\n            canvas: canvas,\n            canvasCtx: canvasCtx\n          }, () => {\n            this.visualize();\n          });\n        }\n    \n      }\n    \n      visualize = () => {\n        const self = this;\n        const { backgroundColor, strokeColor, width, height, visualSetting } = this.props;\n        const { canvas, canvasCtx } = this.state;\n    \n        if(visualSetting === 'sinewave') {\n          Visualizer.visualizeSineWave(canvasCtx, canvas, width, height, backgroundColor, strokeColor);\n        } else if(visualSetting === 'frequencyBars') {\n          Visualizer.visualizeFrequencyBars(canvasCtx, canvas, width, height, backgroundColor, strokeColor);\n        } else if(visualSetting === 'frequencyCircles') {\n          Visualizer.visualizeFrequencyCircles(canvasCtx, canvas, width, height, backgroundColor, strokeColor);\n        }\n    \n      }\n    \n      clear() {\n        const { width, height } = this.props;\n        const { canvasCtx  } = this.state;\n        canvasCtx.clearRect(0, 0, width, height);\n      }\n    \n      render() {\n        const { record, onStop, width, height } = this.props;\n        const { microphoneRecorder, canvasCtx } = this.state;\n    \n        if(record) {\n          if(microphoneRecorder) {\n            microphoneRecorder.startRecording();\n    \n          }\n        } else {\n          if (microphoneRecorder) {\n            microphoneRecorder.stopRecording(onStop);\n            this.clear();\n          }\n        }\n    \n        return (<canvas ref=\"visualizer\" height={height} width={width} className={this.props.className}></canvas>);\n      }\n    }\n"]},"metadata":{},"sourceType":"module"}